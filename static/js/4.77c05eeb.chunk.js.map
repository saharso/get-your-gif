{"version":3,"sources":["ui/notification/notification.tsx","components/gifItemsGallery/gifItemsGallery.tsx","components/routes/routesController.ts","components/routes/favoritesRoute/favoritesRoute.tsx"],"names":["Notification","label","className","GifItemComponent","React","lazy","GifItemsGalleryComponent","results","onFavoriteItemsUpdated","classnames","length","map","item","fallback","details","onFavoritesUpdate","isFavorite","id","RoutesController","dispatch","queryDispatches","query","trim","type","ActionsEnum","SEARCH_QUERY","payload","UPDATE_HISTORY","favoriteDispatches","favoriteUpdate","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","FavoriteRouterComponent","useContext","AppContext","state","useState","data","setData","useEffect","arrayFromMap","favoritesMap"],"mappings":"mHAAA,sBAiBeA,IAVmD,SAAC,GAAW,IAAVC,EAAS,EAATA,MAChE,OACI,oBACIC,UAAU,kBADd,SAGKD,M,gCCZb,kEAOME,EAAmBC,IAAMC,MAAK,kBAAI,gCA2BzBC,IAhB2D,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,uBACjF,OAAO,0BAASN,UAAWO,IAAW,sBAAuB,CAAC,WAA+B,IAAnBF,EAAQG,SAA3E,UACiB,IAAnBH,EAAQG,QAAgB,cAAC,IAAD,CAAcT,MAAM,qBAEzCM,EAAQI,KAAI,SAAAC,GAAI,OAAI,cAAC,WAAD,CAAwBC,SAAU,cAAC,IAAD,IAAlC,SAChB,cAACV,EAAD,CACIW,QAASF,EACTG,kBAAmB,SAACC,EAAqBJ,GACrCJ,GAA0BA,EAAuB,CAACI,OAAMI,mBAJjCJ,EAAKK,Y,0ECtBpD,YAoBeC,IAhBf,SAA0BC,GActB,MAAO,CAACC,gBAbR,SAAyBC,GACjBA,EAAMC,SACVH,EAAS,CAACI,KAAMC,IAAYC,aAAcC,QAASL,IACnDF,EAAS,CAACI,KAAMC,IAAYG,eAAgBD,QAASL,MAUhCO,mBAPzB,SAA4BC,GACpBA,IACJA,GAAkBA,EAAeb,WAC7BG,EAAS,CAACI,KAAMC,IAAYM,iBAAkBJ,QAASG,EAAejB,OACtEO,EAAS,CAACI,KAAMC,IAAYO,sBAAuBL,QAAO,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAgBjB,Y,wICTzE,SAASoB,IAA0B,IAAD,EACjBC,qBAAWC,KAA/BC,EADqC,EACrCA,MAAOhB,EAD8B,EAC9BA,SAD8B,EAErBiB,mBAAS,IAFY,mBAEtCC,EAFsC,KAEhCC,EAFgC,KAQ7C,OAJAC,qBAAU,WACND,EAAQE,YAAaL,EAAMM,iBAC5B,CAACN,IAEG,0BAASjC,UAAU,2CAAnB,UACH,wBAAQA,UAAU,2BAAlB,SACI,oBAAIA,UAAU,UAAd,yBAEJ,sBAAMA,UAAU,iBAAhB,SACI,cAAC,IAAD,CACIK,QAAS8B,EACT7B,uBAAwB,SAACqB,GACrBX,YAAiBC,GAAUS,mBAAmBC","file":"static/js/4.77c05eeb.chunk.js","sourcesContent":["import './notification.scss';\nimport React from 'react';\n\nexport interface INotificationProps {\n    label: string;\n}\n\nconst Notification: React.FunctionComponent<INotificationProps> = ({label})=>{\n    return  (\n        <h2 \n            className=\"ui-notification\"\n        >\n            {label}\n        </h2>\n    )\n}\n\nexport default Notification;","import './gifItemsGallery.scss';\nimport React, {Suspense} from 'react';\nimport GifItemSchema from '../../models/gifItemSchema';\nimport Loader from '../../ui/loader/loader';\nimport Notification from '../../ui/notification/notification';\nimport classnames from 'classnames';\n\nconst GifItemComponent = React.lazy(()=>import('../gifItem/gifItem'));\nexport interface IFavoriteUpdates {\n    item: GifItemSchema;\n    isFavorite: boolean\n}\ninterface ISearchResults {\n    results: GifItemSchema[];\n    onFavoriteItemsUpdated?: (favoriteUpdates: IFavoriteUpdates) => void;\n}\n\n\nconst GifItemsGalleryComponent: React.FunctionComponent<ISearchResults> = ({results, onFavoriteItemsUpdated}) => {\n    return <article className={classnames('gyg-gifItemsGallery', {'is-empty': results.length === 0})}>\n        {results.length === 0 && <Notification label=\"No results found\" />}\n        {\n            results.map(item => <Suspense key={item.id} fallback={<Loader/>}>\n                <GifItemComponent\n                    details={item}\n                    onFavoritesUpdate={(isFavorite: boolean, item: GifItemSchema )=>{\n                        onFavoriteItemsUpdated && onFavoriteItemsUpdated({item, isFavorite})\n                    }}\n                />\n            </Suspense>)\n        }\n    </article>;\n}\n\nexport default GifItemsGalleryComponent;","import ActionsEnum from '../../models/actions.enum';\nimport { IFavoriteUpdates } from '../gifItemsGallery/gifItemsGallery';\n\n\nfunction RoutesController(dispatch: Function) {\n    function queryDispatches(query: string) {\n        if(!query.trim()) return;\n        dispatch({type: ActionsEnum.SEARCH_QUERY, payload: query});\n        dispatch({type: ActionsEnum.UPDATE_HISTORY, payload: query});\n    }\n    \n    function favoriteDispatches(favoriteUpdate?: IFavoriteUpdates) {\n        if(!favoriteUpdate) return;\n        favoriteUpdate && favoriteUpdate.isFavorite ? \n            dispatch({type: ActionsEnum.ADD_TO_FAVORITES, payload: favoriteUpdate.item}) :\n            dispatch({type: ActionsEnum.REMOVE_FROM_FAVORITES, payload: favoriteUpdate?.item});\n    }\n    \n    return {queryDispatches, favoriteDispatches}   \n}\nexport default RoutesController;","import {useState, useContext, useEffect} from 'react';\nimport GifItemsGalleryComponent, { IFavoriteUpdates } from '../../gifItemsGallery/gifItemsGallery';\nimport {AppContext} from '../../../models/appContext';\nimport arrayFromMap from '../../../actions/arrayFromMap';\nimport RoutesController from '../routesController';\n\nexport default function FavoriteRouterComponent(){\n    const { state, dispatch } = useContext(AppContext);\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        setData(arrayFromMap(state.favoritesMap));\n    }, [state]);\n\n    return <article className=\"gyt-favoritesRoute layout-gridHeaderMain\">\n        <header className=\"space-paddingX space-row\">\n            <h2 className=\"font-h2\">Favorites</h2>\n        </header>\n        <main className=\"layout-scrollY\">\n            <GifItemsGalleryComponent \n                results={data}\n                onFavoriteItemsUpdated={(favoriteUpdate: IFavoriteUpdates)=>{\n                    RoutesController(dispatch).favoriteDispatches(favoriteUpdate);\n                }}            \n            />\n        </main>\n    </article>;\n}"],"sourceRoot":""}